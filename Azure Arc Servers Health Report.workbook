{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Azure Arc-enabled Servers Health"
      },
      "name": "Heading"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "e02deff0-fe18-41cc-9544-120772dc110d",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Azure Arc Agent",
            "subTarget": "AzureArc",
            "style": "link"
          },
          {
            "id": "500e8313-bca4-434a-a52e-53aee26e89d2",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Windows Benefits",
            "subTarget": "WinBenefits",
            "style": "link"
          },
          {
            "id": "5392398d-3a21-4377-9997-96b487655241",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "SQL Extension",
            "subTarget": "SQLExt",
            "style": "link"
          }
        ]
      },
      "name": "links - 2"
    },
    {
      "type": 1,
      "content": {
        "json": "The SQL Server Extension installs when a SQL Server instance is detected in an Azure Arc-enabled Server, and adds useful features like inventory, assessments, etc.\r\n\r\n- The Extension must be in communication with Azure constantly. the value of lastInventoryMins should not be greater than 120. If this is the case, verify that the server is online, the service \"Microsoft Sql Server Extension Service\" started on the server and communications between the server and Azure endpoints open.\r\n- To enable benefits, you must have a valid license. Options are \"Paid\" when you have a valid license with Software Assurance, or PAYG when you want to purchase licenses through Azure directly (take into account that with PAYG licensing costs will be added to the Azure bill) (read more: https://learn.microsoft.com/en-us/sql/sql-server/azure-arc/overview?view=sql-server-ver16)\r\n- Verify that the service is running and in Auto startup mode. To monitor service status with this workbook you need to enable Inventory for the Azure Arc-enabled Server (enable Windows benefits first if applicable to avoid additional costs)"
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "SQLExt"
      },
      "name": "text - 14"
    },
    {
      "type": 1,
      "content": {
        "json": "This section of the report presents the activation status of Windows Benefits provided by Software Assurance (read more: https://learn.microsoft.com/en-us/azure/azure-arc/servers/windows-server-management-overview?tabs=portal).\r\n\r\nRequirements:\r\n- Windows Server 2016 or higher\r\n- Connected Machine Agent version 1.38 or higher is required; and 1.46 or higher is recommended\r\n- The Azure Arc-enabled server must be Connected for enrollment. Disconnected and expired servers aren't eligible. Usage of the included benefits requires connectivity.\r\n- The Azure Arc-enabled server must be officially licensed through a valid licensing channel. Unlicensed servers aren't eligible for these benefits. Azure Arc-enabled servers enrolled in Windows Server pay-as-you-go are automatically activated for these benefits."
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "WinBenefits"
      },
      "name": "text - 14"
    },
    {
      "type": 1,
      "content": {
        "json": "The Azure Arc or Connected Machine Agent must be in uninterrupted communication with Azure. Communication can be lost for many reasons: e.g. network problems, services are down, or the server is off. When the problem is solved, communication resumes automatically. But if many days pass, the trust relationship between the Agent and Azure may be broken, and the Agent must be reinstalled and reconfigured. In this report, 5 possible states are shown:\r\n- Connected: the server has communicated with Azure recently.\r\n- Disconnected: the server has not communicated with Azure for the last 5 days.\r\n- Offline: the server has not communicated with Azure for the last 30 days.\r\n- Missing: the server has not communicated with Azure in more than 30 days, but the trust relationship is not yet broken.\r\n- Expired: the trust relationship between the Agent and Azure is broken.\r\n\r\nHere is some sample action plan to remediate servers not in Connected state:\r\n* Prioritize servers that are nearing the 60 days threshold (Offline, Missing)\r\n* If the server does not exist anymore, clean up the resource in Azure Arc\r\n* If the server still exists, troubleshoot the service status and network conditions (https://learn.microsoft.com/en-us/azure/azure-arc/servers/troubleshoot-agent-onboard)\r\n* If the server is in an Expired state, disconnect and reconnect the Azure Arc Agent\r\n\r\nAlso, make sure to keep the Azure Arc Agent up-to-date. Only Connected Machine agent versions within the last 1 year are officially supported by the product group. Customers should update to an agent version within this window. \r\n* How to upgrade the agent: https://learn.microsoft.com/en-us/azure/azure-arc/servers/manage-agent?tabs=windows#upgrade-the-agent\r\n* Release notes for the latest Agent versions: https://learn.microsoft.com/en-us/azure/azure-arc/servers/agent-release-notes"
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "AzureArc"
      },
      "name": "text - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Run query to see results.\r\nresources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider\r\n| extend lastStatusChange = properties.lastStatusChange\r\n| extend daysOffline = round(((now() - lastStatusChange) / 1d),0)\r\n| extend datacenter = iif(isnull(tags.Datacenter), 'N/A', tags.Datacenter)\r\n| extend agentVersion = properties.agentVersion\r\n| extend status = properties.status\r\n| extend state = case(\r\nstatus =~ 'Connected' and daysOffline < 1, 'Connected',\r\nstatus =~ 'Disconnected' and daysOffline <5, 'Disconnected',\r\nstatus =~ 'Disconnected' and daysOffline <30, 'Offline',\r\nstatus =~ 'Disconnected', 'Missing',\r\nstatus =~ 'Expired', 'Expired',\r\nstatus =~ '', 'Not Connected',\r\n'')\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| summarize count() by tostring(status)",
        "size": 4,
        "title": "Azure Arc Agent status summary",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "status",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "count_",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true,
          "sortCriteriaField": "count_",
          "sortOrderField": 2
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "AzureArc"
      },
      "name": "query - 3"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Run query to see results.\r\nresources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider\r\n| extend lastStatusChange = properties.lastStatusChange\r\n| extend daysOffline = round(((now() - lastStatusChange) / 1d),0)\r\n| extend datacenter = iif(isnull(tags.Datacenter), 'N/A', tags.Datacenter)\r\n| extend agentVersion = properties.agentVersion\r\n| extend parts = split(agentVersion, \".\")\r\n| extend agentMinVer = strcat(parts[0], \".\", parts[1])\r\n| extend status = properties.status\r\n| extend state = case(\r\nstatus =~ 'Connected' and daysOffline < 1, 'Connected',\r\nstatus =~ 'Disconnected' and daysOffline <5, 'Disconnected',\r\nstatus =~ 'Disconnected' and daysOffline <30, 'Offline',\r\nstatus =~ 'Disconnected', 'Missing',\r\nstatus =~ 'Expired', 'Expired',\r\nstatus =~ '', 'Not Connected',\r\n'')\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n| project id,subscriptionName,resourceGroup,location,status,agentMinVer,lastStatusChange,daysOffline,agentVersion,CloudProvider,datacenter,operatingSystem,tags\r\n| summarize count() by tostring(agentMinVer)",
        "size": 4,
        "title": "Azure Arc Agent installed versions summary",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "visualization": "table",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "agentMinVer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "count_",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true,
          "sortCriteriaField": "agentMinVer",
          "sortOrderField": 1
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "AzureArc"
      },
      "name": "query - 5"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Run query to see results.\r\nresources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider\r\n| extend lastStatusChange = properties.lastStatusChange\r\n| extend daysOffline = round(((now() - lastStatusChange) / 1d),0)\r\n| extend datacenter = iif(isnull(tags.Datacenter), 'N/A', tags.Datacenter)\r\n| extend agentVersion = properties.agentVersion\r\n| extend parts = split(agentVersion, \".\")\r\n| extend agentMinVer = strcat(parts[0], \".\", parts[1])\r\n| extend status = properties.status\r\n| extend state = case(\r\nstatus =~ 'Connected' and daysOffline < 1, 'Connected',\r\nstatus =~ 'Disconnected' and daysOffline <5, 'Disconnected',\r\nstatus =~ 'Disconnected' and daysOffline <30, 'Offline',\r\nstatus =~ 'Disconnected', 'Missing',\r\nstatus =~ 'Expired', 'Expired',\r\nstatus =~ '', 'Not Connected',\r\n'')\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n| project id,subscriptionName,resourceGroup,location,status,agentMinVer,lastStatusChange,daysOffline,agentVersion,CloudProvider,datacenter,operatingSystem,tags\r\n\r\n",
        "size": 0,
        "showAnalytics": true,
        "title": "Azure Arc Agent status details",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "status",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Disconnected",
                    "representation": "1",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Offline",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Missing",
                    "representation": "3",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Expired",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "lastStatusChange",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimeNoMsPattern"
              }
            }
          ],
          "sortBy": [
            {
              "itemKey": "$gen_date_lastStatusChange_6",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_date_lastStatusChange_6",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "AzureArc"
      },
      "name": "query - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider,\r\ndatacenter = iif(isnull(tags.Datacenter), '', tags.Datacenter),\r\nstate = properties.status,\r\ncores = properties.detectedProperties.coreCount\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| extend licenseProfile = properties.licenseProfile\r\n| extend \r\nsoftwareAssurance = licenseProfile.softwareAssurance,\r\nsoftwareAssuranceCustomer = licenseProfile.softwareAssurance.softwareAssuranceCustomer,\r\nproductSubscriptionStatus = tostring(licenseProfile.productProfile.subscriptionStatus),\r\nlicenseChannel = tostring(licenseProfile.licenseChannel),\r\nlicenseStatus = tostring(licenseProfile.licenseStatus)\r\n| where operatingSystem == 'Windows' and CloudProvider == 'N/A'\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n| extend benefitsStatus = case(\r\n    softwareAssuranceCustomer == true, \"Activated\",\r\n    (licenseStatus =~ \"Licensed\" and licenseChannel =~ \"PGS:TB\") or productSubscriptionStatus =~ \"Enabled\", \"Activated via Pay-as-you-go\",\r\n    isnull(softwareAssurance) or isnull(softwareAssuranceCustomer) or softwareAssuranceCustomer == false, \"Not activated\",\r\n    \"Not activated\")\r\n| project id,subscriptionName,resourceGroup,benefitsStatus,cores, state,operatingSystem, CloudProvider,datacenter,location,tags\r\n| summarize count() by tostring(CloudProvider)",
        "size": 4,
        "title": "Windows Benefits pending servers",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "CloudProvider",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "count_",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "WinBenefits"
      },
      "customWidth": "50",
      "name": "query - 9"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider,\r\ndatacenter = iif(isnull(tags.Datacenter), '', tags.Datacenter),\r\nstate = properties.status,\r\ncores = properties.detectedProperties.coreCount\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| extend licenseProfile = properties.licenseProfile\r\n| extend \r\nsoftwareAssurance = licenseProfile.softwareAssurance,\r\nsoftwareAssuranceCustomer = licenseProfile.softwareAssurance.softwareAssuranceCustomer,\r\nproductSubscriptionStatus = tostring(licenseProfile.productProfile.subscriptionStatus),\r\nlicenseChannel = tostring(licenseProfile.licenseChannel),\r\nlicenseStatus = tostring(licenseProfile.licenseStatus)\r\n| where operatingSystem == 'Windows'\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n| extend benefitsStatus = case(\r\n    softwareAssuranceCustomer == true, \"Activated\",\r\n    (licenseStatus =~ \"Licensed\" and licenseChannel =~ \"PGS:TB\") or productSubscriptionStatus =~ \"Enabled\", \"Activated via Pay-as-you-go\",\r\n    isnull(softwareAssurance) or isnull(softwareAssuranceCustomer) or softwareAssuranceCustomer == false, \"Not activated\",\r\n    \"Not activated\")\r\n| project id,subscriptionName,resourceGroup,benefitsStatus,cores, state,operatingSystem, CloudProvider,datacenter,location,tags\r\n| summarize sum(toint(cores)) by tostring(CloudProvider)",
        "size": 4,
        "title": "Windows Benefits pending cores",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "CloudProvider",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "sum_cores",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "WinBenefits"
      },
      "customWidth": "50",
      "name": "query - 8"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider,\r\ndatacenter = iif(isnull(tags.Datacenter), '', tags.Datacenter),\r\nstate = properties.status,\r\ncores = properties.detectedProperties.coreCount\r\n| extend os = properties.osName\r\n| extend osSku = properties.osSku\r\n| extend agentVersion = properties.agentVersion\r\n| extend parts = split(agentVersion, \".\")\r\n| extend agentMinVer = strcat(parts[0], \".\", parts[1])\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| extend licenseProfile = properties.licenseProfile\r\n| extend \r\nsoftwareAssurance = licenseProfile.softwareAssurance,\r\nsoftwareAssuranceCustomer = licenseProfile.softwareAssurance.softwareAssuranceCustomer,\r\nproductSubscriptionStatus = tostring(licenseProfile.productProfile.subscriptionStatus),\r\nlicenseChannel = tostring(licenseProfile.licenseChannel),\r\nlicenseStatus = tostring(licenseProfile.licenseStatus)\r\n| where operatingSystem == 'Windows'\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n| extend benefitsStatus = case(\r\n    softwareAssuranceCustomer == true, \"Activated\",\r\n    (licenseStatus =~ \"Licensed\" and licenseChannel =~ \"PGS:TB\") or productSubscriptionStatus =~ \"Enabled\", \"Activated via Pay-as-you-go\",\r\n    isnull(softwareAssurance) or isnull(softwareAssuranceCustomer) or softwareAssuranceCustomer == false, \"Not activated\",\r\n    \"Not activated\")\r\n| project id,subscriptionName,resourceGroup,benefitsStatus,cores, state,osSku, agentMinVer,CloudProvider,datacenter,location,tags",
        "size": 0,
        "showAnalytics": true,
        "title": "Windows Benefits Activation details",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "benefitsStatus",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Activated via Pay-as-you-go",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Activated",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "warning",
                    "text": "{0}{1}"
                  }
                ]
              }
            }
          ]
        },
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "benefitsStatus",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "TotalDeathCases",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "WinBenefits"
      },
      "name": "query - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type == 'microsoft.azurearcdata/sqlserverinstances'\r\n| extend Version = properties.version\r\n| extend Edition = properties.edition\r\n| extend lastInventoryTime = properties.lastInventoryUploadTime\r\n| extend lastInventoryMins = round(((now() - lastInventoryTime) / 1m),0)\r\n| extend containerId = tolower(tostring (properties.containerResourceId))\r\n| where Edition in (\"Enterprise\", \"Standard\",\"Developer\")\r\n| where isnotempty(containerId)\r\n| project containerId, SQL_instance = name, Version, Edition, lastInventoryTime,lastInventoryMins\r\n| join kind=inner (\r\n    resources\r\n    | where type == \"microsoft.hybridcompute/machines\"\r\n    | extend machineId = tolower(tostring(id))\r\n    | project machineId, Machine_name = name\r\n)\r\non $left.containerId == $right.machineId\r\n| join kind=inner (\r\n    resources\r\n    | where type == \"microsoft.hybridcompute/machines/extensions\"\r\n    | where properties.type in (\"WindowsAgent.SqlServer\",\"LinuxAgent.SqlServer\")\r\n    | extend machineIdHasSQLServerExtensionInstalled = tolower(iff(id contains \"/extensions/WindowsAgent.SqlServer\" or id contains \"/extensions/LinuxAgent.SqlServer\", substring(id, 0, indexof(id, \"/extensions/\")), \"\"))\r\n    | project machineIdHasSQLServerExtensionInstalled, Extension_State = properties.provisioningState, License_Type = properties.settings.LicenseType, ESU = iff(notnull(properties.settings.enableExtendedSecurityUpdates), iff(properties.settings.enableExtendedSecurityUpdates == true,\"enabled\",\"disabled\"), \"\"), Extension_Version = properties.instanceView.typeHandlerVersion\r\n)\r\non $left.machineId == $right.machineIdHasSQLServerExtensionInstalled\r\n| project-away machineId, containerId, machineIdHasSQLServerExtensionInstalled\r\n",
        "size": 0,
        "showAnalytics": true,
        "title": "SQL Server Instances discovered",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "lastInventoryTime",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimeNoMsPattern"
              }
            },
            {
              "columnMatch": "lastInventoryMins",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">",
                    "thresholdValue": "60",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "1440",
                    "representation": "3",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "10080",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Extension_State",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Succeeded",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "3",
                    "text": "{0}{1}"
                  }
                ]
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "SQLExt"
      },
      "name": "query - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "ConfigurationData\r\n| where ConfigDataType == \"WindowsServices\" and SvcDisplayName == \"Microsoft Sql Server Extension Service\"\r\n| top 1 by TimeGenerated desc\r\n| project lastStatus = TimeGenerated,Computer,SvcDisplayName,SvcName,SvcState,SvcStartupType,SvcAccount",
        "size": 0,
        "showAnalytics": true,
        "title": "SQL Extension Service status",
        "timeContext": {
          "durationMs": 604800000
        },
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "/subscriptions/80905cd3-3763-4023-98a7-f171a69cf8f0/resourceGroups/rg-arc-cus/providers/Microsoft.OperationalInsights/workspaces/law-arc-cus"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "lastStatus",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimeNoMsPattern"
              }
            },
            {
              "columnMatch": "SvcState",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Running",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Stopped",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "unknown",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "SvcStartupType",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "Auto",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Manual",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "==",
                    "thresholdValue": "Disabled",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "unknown",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "TimeGenerated",
              "formatter": 6,
              "dateFormat": {
                "showUtcTime": null,
                "formatName": "shortDateTimeNoMsPattern"
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "SQLExt"
      },
      "name": "query - 10"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Run query to see results.\r\nresources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider\r\n| extend lastStatusChange = properties.lastStatusChange\r\n| extend daysOffline = round(((now() - lastStatusChange) / 1d),0)\r\n| extend datacenter = iif(isnull(tags.Datacenter), 'N/A', tags.Datacenter)\r\n| extend agentVersion = properties.agentVersion\r\n| extend parts = split(agentVersion, \".\")\r\n| extend agentMinVer = strcat(parts[0], \".\", parts[1])\r\n| extend status = properties.status\r\n| extend state = case(\r\nstatus =~ 'Connected' and daysOffline < 1, 'Connected',\r\nstatus =~ 'Disconnected' and daysOffline <5, 'Disconnected',\r\nstatus =~ 'Disconnected' and daysOffline <30, 'Offline',\r\nstatus =~ 'Disconnected', 'Missing',\r\nstatus =~ 'Expired', 'Expired',\r\nstatus =~ '', 'Not Connected',\r\n'')\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n| where status == 'Disconnected'\r\n| top 20 by todatetime(lastStatusChange) asc\r\n| project id,daysOffline\r\n\r\n",
        "size": 0,
        "title": "To 20 Servers not connecting sorted by days offline",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "AzureArc"
      },
      "customWidth": "50",
      "name": "query - 11"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type =~ 'microsoft.hybridcompute/machines'\r\n| extend CloudProvider = properties.cloudMetadata.provider\r\n| extend lastStatusChange = properties.lastStatusChange\r\n| extend daysOffline = round(((now() - lastStatusChange) / 1d),0)\r\n| extend datacenter = iif(isnull(tags.Datacenter), 'N/A', tags.Datacenter)\r\n| extend agentVersion = properties.agentVersion\r\n| extend parts = split(agentVersion, \".\")\r\n| extend agentMinVer = strcat(parts[0], \".\", parts[1])\r\n| extend status = properties.status\r\n| extend state = case(\r\nstatus =~ 'Connected' and daysOffline < 1, 'Connected',\r\nstatus =~ 'Disconnected' and daysOffline <5, 'Disconnected',\r\nstatus =~ 'Disconnected' and daysOffline <30, 'Offline',\r\nstatus =~ 'Disconnected', 'Missing',\r\nstatus =~ 'Expired', 'Expired',\r\nstatus =~ '', 'Not Connected',\r\n'')\r\n| extend os = properties.osName\r\n| extend operatingSystem = case(\r\nos =~ 'windows', 'Windows',\r\nos =~ 'linux', 'Linux',\r\n'')\r\n| join kind=inner (\r\n    resourcecontainers\r\n    | where type == 'microsoft.resources/subscriptions'\r\n    | project subscriptionId, subscriptionName = name)\r\n    on subscriptionId\r\n//| where status == 'Connected'\r\n| top 20 by tostring(agentMinVer) asc\r\n| project id,agentMinVer,agentVersion\r\n\r\n",
        "size": 0,
        "title": "To 20 Servers connected with oldest agent version",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "value::all"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "AzureArc"
      },
      "customWidth": "50",
      "name": "query - 12"
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}